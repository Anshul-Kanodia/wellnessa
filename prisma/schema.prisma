// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  username        String   @unique
  password        String
  email           String   @unique
  name            String
  accessLevel     Int      @default(1)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  nextAssessment  DateTime?
  assessmentsDue  Boolean  @default(true)
  
  // Relations
  assessmentResults UserAssessmentResult[]
  
  @@map("users")
}

model Admin {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  permissions Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("admins")
}

model SuperAdmin {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("super_admins")
}

model Assessment {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  groups      Json
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  results UserAssessmentResult[]
  
  @@map("assessments")
}

model AssessmentGroup {
  id           Int      @id @default(autoincrement())
  assessmentId Int
  name         String
  description  String?
  orderIndex   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  subgroups AssessmentSubgroup[]
  
  @@map("assessment_groups")
}

model AssessmentSubgroup {
  id          Int      @id @default(autoincrement())
  groupId     Int
  name        String
  description String?
  orderIndex  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  group     AssessmentGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  questions Question[]
  
  @@map("assessment_subgroups")
}

model Question {
  id          Int      @id @default(autoincrement())
  subgroupId  Int
  question    String
  options     Json
  orderIndex  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  subgroup AssessmentSubgroup @relation(fields: [subgroupId], references: [id], onDelete: Cascade)
  
  @@map("questions")
}

model UserAssessmentResult {
  id           Int      @id @default(autoincrement())
  userId       Int
  assessmentId Int
  responses    Json
  totalScore   Int
  maxScore     Int
  percentage   Float
  feedback     String?
  completedAt  DateTime @default(now())
  
  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  
  @@map("user_assessment_results")
}

model Content {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  title     String?
  content   Json
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("content")
}

model Session {
  id        String   @id @default(cuid())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("sessions")
}
